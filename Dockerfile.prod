# Production Dockerfile - Multi-stage build optimized for t2.micro
FROM node:22-alpine AS base

# Install dumb-init and other essential packages
RUN apk add --no-cache dumb-init curl netcat-openbsd

# Create app directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# ================================
# Dependencies stage
# ================================
FROM base AS deps

# Copy package files
COPY package*.json ./

# Install production dependencies + Prisma CLI
RUN npm ci --only=production && \
    npm install prisma@latest && \
    npm cache clean --force

# ================================
# Build stage
# ================================
FROM base AS build

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Install all dependencies (including dev)
RUN npm ci

# Copy Prisma schema
COPY prisma ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY src ./src/

# Build the application
RUN npm run build

# ================================
# Production stage
# ================================
FROM base AS production

# Set NODE_ENV to production
ENV NODE_ENV=production

# Set memory limits for t2.micro (1GB RAM)
ENV NODE_OPTIONS="--max-old-space-size=768"

# Copy production dependencies from deps stage
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copy built application from build stage
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist

# Copy Prisma files
COPY --from=build --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=build --chown=nestjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

# Ensure Prisma client is available
RUN npx prisma generate

# Copy package.json for npm scripts
COPY --chown=nestjs:nodejs package*.json ./

# Copy entrypoint script
COPY --chown=nestjs:nodejs docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:4000/api/v1/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application using entrypoint script
CMD ["./docker-entrypoint.sh"]
